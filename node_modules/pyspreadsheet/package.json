{
  "name": "pyspreadsheet",
  "version": "0.0.3",
  "description": "Python-based high performance spreadsheet API for Node",
  "keywords": [
    "spreadsheet",
    "excel",
    "xls",
    "xlsx",
    "openpyxl",
    "python-excel",
    "xlsxwriter"
  ],
  "scripts": {
    "test": "mocha tests/*.js",
    "install": "bash install.sh"
  },
  "dependencies": {
    "async": "~0.2.9",
    "underscore": "~1.4.4"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/extrabacon/pyspreadsheet"
  },
  "homepage": "http://github.com/extrabacon/pyspreadsheet",
  "bugs": {
    "url": "http://github.com/extrabacon/pyspreadsheet/issues"
  },
  "author": {
    "name": "Nicolas Mercier",
    "email": "nicolas@extrabacon.net"
  },
  "engines": {
    "node": ">=0.10"
  },
  "readme": "# PySpreadsheet\n\nA high-performance spreadsheet library for Node, powered by Python open source libraries. PySpreadsheet can be used\nto read and write Excel files in both XLS and XLSX formats.\n\nThis module interfaces with a Python shell process to stream JSON fragments through stdio using a child process. The\nPython shell uses multiple open source libraries to perform spreadsheet operations.\n\nIMPORTANT: PySpreadsheet is a work in progress. This is not a stable release.\n\n## Features\n\n+ Faster and more memory efficient than most JS-only alternatives\n+ Uses child processes for isolation and parallelization (will not leak the Node process)\n+ Can stream large files with a Node stream-like API\n+ Can write large files with a simple forward-only API\n+ Support for both XLS and XLSX formats\n+ Native integration with Javascript objects\n\n## Limitations\n\n+ Reading does not parse formats, only data\n+ XLS writing is not yet implemented, only XLSX for now\n+ Only the forward-only write API is available\n\n## Installation\n```bash\nnpm install pyspreadsheet\n```\n\nPython dependencies are installed automatically by downloading the latest version from their repositories. These\ndependencies are:\n\n+ [xlrd](http://github.com/python-excel/xlrd), by Python Excel\n+ [xlwt](http://github.com/python-excel/xlwt), also by Python Excel\n+ [XlsxWriter](http://github.com/jmcnamara/XlsxWriter), by John McNamara\n+ [openpyxl](http://bitbucket.org/ericgazoni/openpyxl), by Eric Gazoni\n\n## Documentation\n\n### Reading a file with the `SpreadsheetReader` class\n\nThe `SpreadsheetReader` class allows you to read spreadsheet files. It can be used as a method for reading an entire\nfile into memory, or as a stream-like object for streaming the data.\n\n#### Reading a file into memory\n\nIf you want to read a file into memory and have the entire contents of the file in an object structure, simply use the\n`read` method. There is no need to create an instance for this scenario.\n\n* `#read(path, options, callback)` - reads an entire spreadsheet file into memory\n  * `path` - the path of the file to read, accepting arrays for reading multiple files at once\n  * `options` - the reading options (optional)\n    * `meta` - load only workbook metadata, without iterating on rows\n    * `sheet` || `sheets` - load sheet(s) selectively, either by name or by index, also accepting arrays\n    * `maxRows` - the maximum number of rows to load per sheet\n  * `callback(err, workbook)` - the callback function to invoke when the operation is completed\n    * `err` - the error, if any\n    * `workbook` - the parsed workbook instance, will be an array if `path` was also an array\n      * `file` - the file used to open the workbook\n      * `meta` - the metadata for this workbook\n        * `user` - the owner of the file\n        * `sheets` - an array of strings containing the name of sheets (available without any iteration)\n      * `sheets[]` - the array of Sheet objects that were loaded\n        * `index` - the ordinal position of the sheet within the workbook\n        * `name` - the name of the sheet\n        * `bounds` - an object specifying the data range for the sheet\n          * `rows` - the total number of rows in the sheet\n          * `columns` - the total number of columns in the sheet\n        * `visibility` - the sheet visibility - possible values are `visible`, `hidden` and `very hidden`\n        * `rows[]` - the array of rows that were loaded - rows are arrays of cells\n          * `row` - the ordinal row number\n          * `column` - the ordinal column number\n          * `address` - the cell address (\"A1\", \"B12\", etc.)\n          * `value` - the cell value, which can be of the following types:\n            * `Number` - for numeric values\n            * `Date` - for cells formatted as dates\n            * `Error` - for cells with errors, such as #NAME?\n            * `Boolean` - for cells formatted as booleans\n            * `String` - for anything else\n        * `cell(address)` - a function returning the cell at a specific location (ex: B12), same as accessing the `rows` array\n\nExample of reading an entire file with `read`:\n\n```javascript\nvar SpreadsheetReader = require('pyspreadsheet').SpreadsheetReader;\n\nSpreadsheetReader.read('input.xlsx', function (err, workbook) {\n  // Iterate on sheets\n  workbook.sheets.forEach(function (sheet) {\n    console.log('sheet: ' + sheet.name);\n    // Iterate on rows\n    sheet.rows.forEach(function (row) {\n      // Iterate on cells\n      row.forEach(function (cell) {\n        console.log(cell.address + ': ' + cell.value);\n      });\n    });\n  });\n});\n```\n\n#### Reading a file from the stream interface\n\nIf you need to open a large file, you may want to stream the data instead to avoid loading the entire file contents into\nmemory. The `SpreadsheetReader` class exposes a stream-like interface that will allow you to read the data\nprogressively.\n\nHere is an example:\n\n```javascript\nvar SpreadsheetReader = require('pyspreadsheet').SpreadsheetReader;\nvar reader = new SpreadsheetReader('examples/sample.xlsx');\n\nreader.on('open', function (workbook) {\n\t// file is open\n\tconsole.log('opened ' + workbook.file);\n}).on('data', function (data) {\n\t// data is being received\n\tconsole.log('buffer contains %d rows from sheet \"%s\"', data.rows.length, data.sheet.name);\n}).on('close', function () {\n\t// file is now closed\n\tconsole.log('file closed');\n}).on('error', function (err) {\n\tthrow err;\n});\n```\n\nFirst, create an instance of `SpreadsheetReader` using the constructor.\n\n* `#ctor(path, options)` - creates a new instance of SpreadsheetReader\n  * `path` - the path of the file(s) to read, accepting arrays for reading multiple files\n  * `options` - the reading options (optional)\n    * `meta` - load only workbook metadata, without iterating on rows\n    * `sheet` || `sheets` - load sheet(s) selectively, either by name or by index, also accepting arrays\n    * `maxRows` - the maximum number of rows to load per sheet\n\nThe constructor will open the file immediately for reading, so make sure you listen to the appropriate events. The\nevents emitted by `SpreadsheetReader` are:\n\n* `open(workbook)` - fires when a workbook has been opened, before any iteration on sheet data\n  * `workbook` - the workbook object\n    * `file` - the file used to open the workbook\n    * `meta` - the metadata for this workbook\n      * `user` - the owner of the file\n      * `sheets` - an array of strings containing the name of sheets (available without any iteration)\n\n* `data(workbook, sheet, rows)` - fires repeatedly as data is being read from the file\n  * `workbook` - the current workbook object\n  * `sheet` - the current sheet object\n  * `rows` - the current batch of rows\n\n* `error(err)` - fires every time an error is encountered while parsing the file, the process is stopped only if a fatal\nerror is encountered\n  * `err` - the error object\n\n* `close()` - fires only once, after all files and data have been read\n\n### Writing a file\n\nUse the `SpreadsheetWriter` class to write a new file. It can only write new files, it cannot change an existing file.\n\nExample:\n\n```javascript\nvar SpreadsheetWriter = require('pyspreadsheet').SpreadsheetWriter;\nvar writer = new SpreadsheetWriter();\n\n// write a string at cell A1\nwriter.write(0, 0, 'hello world!');\n\nwriter.save('examples/output.xlsx', function (err) {\n\tif (err) throw err;\n\tconsole.log('file saved!');\n});\n```\n\n#### The `SpreadsheetWriter` class\n\n* `#ctor(options)` - creates a new instance of `SpreadsheetWriter`\n  * `options` - the workbook options (optional)\n    * `format` - the workbook format, \"xlsx\" for OpenOffice file or \"xls\" for legacy binary format\n    * `defaultDateFormat` - the default number format to apply when writing a date - default : \"yyyy-mm-dd\"\n    * `properties` - workbook properties\n      * `title`\n      * `subject`\n      * `author`\n      * `manager`\n      * `company`\n      * `category`\n      * `keywords`\n      * `comments`\n      * `status`\n\n* `addSheet(name, options)` - adds a new sheet to the workbook\n  * `name` - the name of the sheet (optional)\n  * `options` - the worksheet options (optional)\n    * `hidden`\n    * `activated`\n    * `selected`\n    * `rightToLeft`\n    * `hideZeroValues`\n    * `selection`\n\n* `addFormat(id, format)` - defines a reusable format that can be used with `write`\n  * `id` - the format ID to use with `write`\n  * `format` - the format object\n    * `font`\n      * `name`\n      * `size`\n      * `color`\n      * `bold`\n      * `italic`\n      * `underline`\n      * `strikeout`\n      * `superscript`\n      * `subscript`\n    * `numberFormat`\n    * `locked`\n    * `hidden`\n    * `alignment`\n    * `rotation`\n    * `indent`\n    * `shrinkToFit`\n    * `justifyLastText`\n    * `fill`\n      * `pattern`\n      * `backgroundColor`\n      * `foregroundColor`\n    * `borders`\n      * `top`|`left`|`right`|`bottom`\n        * `style`\n        * `color`\n\n* `write(row|cell, col, data, format)` - writes data into the current sheet\n  * `row`|`cell` - the ordinal row index, or the cell location (ex: A1, B12, etc.)\n  * `col` - the ordinal column index - ignore if using a cell location\n  * `data` - the data to write - can be a primitive, an array for writing a row, or a 2-D array for writing multiple rows\n  * `format` - the format ID or format object to use (optional)\n\n* `append(data, format)` - appends data to the current sheet\n  * `data` - the data to write - can be a primitive, an array for writing a row, or a 2-D array for writing multiple rows\n  * `format` - the format ID or format object to use (optional)\n\n* `save(path, callback)` - saves the workbook file\n  * `path` - the path of the file to save - optional, ignore to receive the stream in the callback instead\n  * `callback(err, stream)` - the callback function to invoke when the save operation is completed\n    * `err` - the error object, if any\n    * `stream` - the output stream, present only if `path` is not specified\n\n* `destroy(callback)` - destroys this instance, releasing all resources and temporary files\n  * `callback` - the callback function to invoke when the operation is completed\n\n## Compatibility\n\n+ Tested with Node 0.10.x\n+ Tested on Mac OS X 10.8\n+ Tested on Ubuntu Linux 12.04 (requires prior installation of curl: apt-get install curl)\n+ Tested on Heroku\n\n## Dependencies\n\n+ Python version 2.7+\n+ [xlrd](http://www.python-excel.org/) version 0.7.4+\n+ [xlwt](http://www.python-excel.org/) version 0.7.5+\n+ [XlsxWriter](http://xlsxwriter.readthedocs.org/en/latest/index.html) version 0.3.6+\n+ [openpyxl](http://openpyxl.readthedocs.org/en/latest/) version 1.6.2+\n+ underscore\n+ bash (installation script)\n+ curl (installation script)\n\n## License\n\nMIT license\n",
  "readmeFilename": "README.md",
  "_id": "pyspreadsheet@0.0.3",
  "dist": {
    "shasum": "cb98d72dcc94982f183f3df7154ecb7a82667770"
  },
  "_from": "pyspreadsheet@*",
  "_resolved": "https://registry.npmjs.org/pyspreadsheet/-/pyspreadsheet-0.0.3.tgz"
}
